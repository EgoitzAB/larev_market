services:
  web:
    build: .
    container_name: django_web
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis-server
      - REDIS_PORT=6379
      - REDIS_DB=0
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
    volumes:
      - .:/app
    depends_on:
      - db
      - redis-server
    command: sh -c "./wait-for-it.sh db:5432 -- ./wait-for-it.sh redis-server:6379 -- apache2ctl -D FOREGROUND"
  db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  redis-server:
    image: redis:latest
    container_name: redis-server
    command: redis-server --save 60 1 --loglevel warning
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
  
  rabbitmq:
    image: "rabbitmq:3-management"
    ports:
      - "5672:5672"
      - "15672:15672"  # Interfaz web de RabbitMQ

  celery_worker:
    build: .
    command: sh -c "./wait-for-it.sh rabbitmq:5672 -- celery -A larev worker --loglevel=info"
    environment:
      - DEBUG=False
      - DB_ENGINE=${DB_ENGINE}
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis-server
      - REDIS_PORT=6379
      - REDIS_DB=0
    depends_on:
      - web
      - rabbitmq
      - redis-server

volumes:
  postgres_data:
  redis-data: